//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "history")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub printer_id: Option<Uuid>,
    pub label_id: Option<Uuid>,
    #[sea_orm(column_type = "Text")]
    pub zpl: String,
    #[sea_orm(column_type = "JsonBinary")]
    pub variables: Json,
    pub printed_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::label::Entity",
        from = "Column::LabelId",
        to = "super::label::Column::Id",
        on_update = "NoAction",
        on_delete = "SetNull"
    )]
    Label,
    #[sea_orm(
        belongs_to = "super::printer::Entity",
        from = "Column::PrinterId",
        to = "super::printer::Column::Id",
        on_update = "NoAction",
        on_delete = "SetNull"
    )]
    Printer,
}

impl Related<super::label::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Label.def()
    }
}

impl Related<super::printer::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Printer.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
